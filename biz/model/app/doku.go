// Code generated by thriftgo (0.4.3). DO NOT EDIT.

package app

import (
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

type GenerateQrisResponse struct {
	ResponseCode       *string           `thrift:"responseCode,1,optional" form:"responseCode" json:"responseCode,omitempty" query:"responseCode"`
	ResponseMessage    *string           `thrift:"responseMessage,2,optional" form:"responseMessage" json:"responseMessage,omitempty" query:"responseMessage"`
	ReferenceNo        *string           `thrift:"referenceNo,3,optional" form:"referenceNo" json:"referenceNo,omitempty" query:"referenceNo"`
	PartnerReferenceNo *string           `thrift:"partnerReferenceNo,4,optional" form:"partnerReferenceNo" json:"partnerReferenceNo,omitempty" query:"partnerReferenceNo"`
	QrContent          *string           `thrift:"qrContent,5,optional" form:"qrContent" json:"qrContent,omitempty" query:"qrContent"`
	TerminalId         *string           `thrift:"terminalId,6,optional" form:"terminalId" json:"terminalId,omitempty" query:"terminalId"`
	AdditionalInfo     map[string]string `thrift:"additionalInfo,7,optional" form:"additionalInfo" json:"additionalInfo,omitempty" query:"additionalInfo"`
}

func NewGenerateQrisResponse() *GenerateQrisResponse {
	return &GenerateQrisResponse{}
}

func (p *GenerateQrisResponse) InitDefault() {
}

var GenerateQrisResponse_ResponseCode_DEFAULT string

func (p *GenerateQrisResponse) GetResponseCode() (v string) {
	if !p.IsSetResponseCode() {
		return GenerateQrisResponse_ResponseCode_DEFAULT
	}
	return *p.ResponseCode
}

var GenerateQrisResponse_ResponseMessage_DEFAULT string

func (p *GenerateQrisResponse) GetResponseMessage() (v string) {
	if !p.IsSetResponseMessage() {
		return GenerateQrisResponse_ResponseMessage_DEFAULT
	}
	return *p.ResponseMessage
}

var GenerateQrisResponse_ReferenceNo_DEFAULT string

func (p *GenerateQrisResponse) GetReferenceNo() (v string) {
	if !p.IsSetReferenceNo() {
		return GenerateQrisResponse_ReferenceNo_DEFAULT
	}
	return *p.ReferenceNo
}

var GenerateQrisResponse_PartnerReferenceNo_DEFAULT string

func (p *GenerateQrisResponse) GetPartnerReferenceNo() (v string) {
	if !p.IsSetPartnerReferenceNo() {
		return GenerateQrisResponse_PartnerReferenceNo_DEFAULT
	}
	return *p.PartnerReferenceNo
}

var GenerateQrisResponse_QrContent_DEFAULT string

func (p *GenerateQrisResponse) GetQrContent() (v string) {
	if !p.IsSetQrContent() {
		return GenerateQrisResponse_QrContent_DEFAULT
	}
	return *p.QrContent
}

var GenerateQrisResponse_TerminalId_DEFAULT string

func (p *GenerateQrisResponse) GetTerminalId() (v string) {
	if !p.IsSetTerminalId() {
		return GenerateQrisResponse_TerminalId_DEFAULT
	}
	return *p.TerminalId
}

var GenerateQrisResponse_AdditionalInfo_DEFAULT map[string]string

func (p *GenerateQrisResponse) GetAdditionalInfo() (v map[string]string) {
	if !p.IsSetAdditionalInfo() {
		return GenerateQrisResponse_AdditionalInfo_DEFAULT
	}
	return p.AdditionalInfo
}

var fieldIDToName_GenerateQrisResponse = map[int16]string{
	1: "responseCode",
	2: "responseMessage",
	3: "referenceNo",
	4: "partnerReferenceNo",
	5: "qrContent",
	6: "terminalId",
	7: "additionalInfo",
}

func (p *GenerateQrisResponse) IsSetResponseCode() bool {
	return p.ResponseCode != nil
}

func (p *GenerateQrisResponse) IsSetResponseMessage() bool {
	return p.ResponseMessage != nil
}

func (p *GenerateQrisResponse) IsSetReferenceNo() bool {
	return p.ReferenceNo != nil
}

func (p *GenerateQrisResponse) IsSetPartnerReferenceNo() bool {
	return p.PartnerReferenceNo != nil
}

func (p *GenerateQrisResponse) IsSetQrContent() bool {
	return p.QrContent != nil
}

func (p *GenerateQrisResponse) IsSetTerminalId() bool {
	return p.TerminalId != nil
}

func (p *GenerateQrisResponse) IsSetAdditionalInfo() bool {
	return p.AdditionalInfo != nil
}

func (p *GenerateQrisResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GenerateQrisResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GenerateQrisResponse) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ResponseCode = _field
	return nil
}
func (p *GenerateQrisResponse) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ResponseMessage = _field
	return nil
}
func (p *GenerateQrisResponse) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ReferenceNo = _field
	return nil
}
func (p *GenerateQrisResponse) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PartnerReferenceNo = _field
	return nil
}
func (p *GenerateQrisResponse) ReadField5(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.QrContent = _field
	return nil
}
func (p *GenerateQrisResponse) ReadField6(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TerminalId = _field
	return nil
}
func (p *GenerateQrisResponse) ReadField7(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}

		var _val string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_val = v
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.AdditionalInfo = _field
	return nil
}

func (p *GenerateQrisResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GenerateQrisResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GenerateQrisResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetResponseCode() {
		if err = oprot.WriteFieldBegin("responseCode", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ResponseCode); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GenerateQrisResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetResponseMessage() {
		if err = oprot.WriteFieldBegin("responseMessage", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ResponseMessage); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GenerateQrisResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetReferenceNo() {
		if err = oprot.WriteFieldBegin("referenceNo", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ReferenceNo); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *GenerateQrisResponse) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetPartnerReferenceNo() {
		if err = oprot.WriteFieldBegin("partnerReferenceNo", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.PartnerReferenceNo); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *GenerateQrisResponse) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetQrContent() {
		if err = oprot.WriteFieldBegin("qrContent", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.QrContent); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *GenerateQrisResponse) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetTerminalId() {
		if err = oprot.WriteFieldBegin("terminalId", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.TerminalId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *GenerateQrisResponse) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetAdditionalInfo() {
		if err = oprot.WriteFieldBegin("additionalInfo", thrift.MAP, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.AdditionalInfo)); err != nil {
			return err
		}
		for k, v := range p.AdditionalInfo {
			if err := oprot.WriteString(k); err != nil {
				return err
			}
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *GenerateQrisResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GenerateQrisResponse(%+v)", *p)

}

type QueryQrisResponseAmount struct {
	Value    string `thrift:"value,1" form:"value" json:"value" query:"value"`
	Currency string `thrift:"currency,2" form:"currency" json:"currency" query:"currency"`
}

func NewQueryQrisResponseAmount() *QueryQrisResponseAmount {
	return &QueryQrisResponseAmount{}
}

func (p *QueryQrisResponseAmount) InitDefault() {
}

func (p *QueryQrisResponseAmount) GetValue() (v string) {
	return p.Value
}

func (p *QueryQrisResponseAmount) GetCurrency() (v string) {
	return p.Currency
}

var fieldIDToName_QueryQrisResponseAmount = map[int16]string{
	1: "value",
	2: "currency",
}

func (p *QueryQrisResponseAmount) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_QueryQrisResponseAmount[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *QueryQrisResponseAmount) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Value = _field
	return nil
}
func (p *QueryQrisResponseAmount) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Currency = _field
	return nil
}

func (p *QueryQrisResponseAmount) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("QueryQrisResponseAmount"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *QueryQrisResponseAmount) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("value", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Value); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *QueryQrisResponseAmount) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("currency", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Currency); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *QueryQrisResponseAmount) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryQrisResponseAmount(%+v)", *p)

}

type QueryQrisResponseAdditionalInfo struct {
	ApprovalCode   *string `thrift:"approvalCode,1,optional" form:"approvalCode" json:"approvalCode,omitempty" query:"approvalCode"`
	ConvenienceFee *string `thrift:"convenienceFee,2,optional" form:"convenienceFee" json:"convenienceFee,omitempty" query:"convenienceFee"`
	IssuerId       *string `thrift:"issuerId,3,optional" form:"issuerId" json:"issuerId,omitempty" query:"issuerId"`
	IssuerName     *string `thrift:"issuerName,4,optional" form:"issuerName" json:"issuerName,omitempty" query:"issuerName"`
	TerminalId     *string `thrift:"terminalId,5,optional" form:"terminalId" json:"terminalId,omitempty" query:"terminalId"`
	CustomerName   *string `thrift:"customerName,6,optional" form:"customerName" json:"customerName,omitempty" query:"customerName"`
}

func NewQueryQrisResponseAdditionalInfo() *QueryQrisResponseAdditionalInfo {
	return &QueryQrisResponseAdditionalInfo{}
}

func (p *QueryQrisResponseAdditionalInfo) InitDefault() {
}

var QueryQrisResponseAdditionalInfo_ApprovalCode_DEFAULT string

func (p *QueryQrisResponseAdditionalInfo) GetApprovalCode() (v string) {
	if !p.IsSetApprovalCode() {
		return QueryQrisResponseAdditionalInfo_ApprovalCode_DEFAULT
	}
	return *p.ApprovalCode
}

var QueryQrisResponseAdditionalInfo_ConvenienceFee_DEFAULT string

func (p *QueryQrisResponseAdditionalInfo) GetConvenienceFee() (v string) {
	if !p.IsSetConvenienceFee() {
		return QueryQrisResponseAdditionalInfo_ConvenienceFee_DEFAULT
	}
	return *p.ConvenienceFee
}

var QueryQrisResponseAdditionalInfo_IssuerId_DEFAULT string

func (p *QueryQrisResponseAdditionalInfo) GetIssuerId() (v string) {
	if !p.IsSetIssuerId() {
		return QueryQrisResponseAdditionalInfo_IssuerId_DEFAULT
	}
	return *p.IssuerId
}

var QueryQrisResponseAdditionalInfo_IssuerName_DEFAULT string

func (p *QueryQrisResponseAdditionalInfo) GetIssuerName() (v string) {
	if !p.IsSetIssuerName() {
		return QueryQrisResponseAdditionalInfo_IssuerName_DEFAULT
	}
	return *p.IssuerName
}

var QueryQrisResponseAdditionalInfo_TerminalId_DEFAULT string

func (p *QueryQrisResponseAdditionalInfo) GetTerminalId() (v string) {
	if !p.IsSetTerminalId() {
		return QueryQrisResponseAdditionalInfo_TerminalId_DEFAULT
	}
	return *p.TerminalId
}

var QueryQrisResponseAdditionalInfo_CustomerName_DEFAULT string

func (p *QueryQrisResponseAdditionalInfo) GetCustomerName() (v string) {
	if !p.IsSetCustomerName() {
		return QueryQrisResponseAdditionalInfo_CustomerName_DEFAULT
	}
	return *p.CustomerName
}

var fieldIDToName_QueryQrisResponseAdditionalInfo = map[int16]string{
	1: "approvalCode",
	2: "convenienceFee",
	3: "issuerId",
	4: "issuerName",
	5: "terminalId",
	6: "customerName",
}

func (p *QueryQrisResponseAdditionalInfo) IsSetApprovalCode() bool {
	return p.ApprovalCode != nil
}

func (p *QueryQrisResponseAdditionalInfo) IsSetConvenienceFee() bool {
	return p.ConvenienceFee != nil
}

func (p *QueryQrisResponseAdditionalInfo) IsSetIssuerId() bool {
	return p.IssuerId != nil
}

func (p *QueryQrisResponseAdditionalInfo) IsSetIssuerName() bool {
	return p.IssuerName != nil
}

func (p *QueryQrisResponseAdditionalInfo) IsSetTerminalId() bool {
	return p.TerminalId != nil
}

func (p *QueryQrisResponseAdditionalInfo) IsSetCustomerName() bool {
	return p.CustomerName != nil
}

func (p *QueryQrisResponseAdditionalInfo) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_QueryQrisResponseAdditionalInfo[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *QueryQrisResponseAdditionalInfo) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ApprovalCode = _field
	return nil
}
func (p *QueryQrisResponseAdditionalInfo) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ConvenienceFee = _field
	return nil
}
func (p *QueryQrisResponseAdditionalInfo) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.IssuerId = _field
	return nil
}
func (p *QueryQrisResponseAdditionalInfo) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.IssuerName = _field
	return nil
}
func (p *QueryQrisResponseAdditionalInfo) ReadField5(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TerminalId = _field
	return nil
}
func (p *QueryQrisResponseAdditionalInfo) ReadField6(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.CustomerName = _field
	return nil
}

func (p *QueryQrisResponseAdditionalInfo) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("QueryQrisResponseAdditionalInfo"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *QueryQrisResponseAdditionalInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetApprovalCode() {
		if err = oprot.WriteFieldBegin("approvalCode", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ApprovalCode); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *QueryQrisResponseAdditionalInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetConvenienceFee() {
		if err = oprot.WriteFieldBegin("convenienceFee", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ConvenienceFee); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *QueryQrisResponseAdditionalInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetIssuerId() {
		if err = oprot.WriteFieldBegin("issuerId", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.IssuerId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *QueryQrisResponseAdditionalInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetIssuerName() {
		if err = oprot.WriteFieldBegin("issuerName", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.IssuerName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *QueryQrisResponseAdditionalInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetTerminalId() {
		if err = oprot.WriteFieldBegin("terminalId", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.TerminalId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *QueryQrisResponseAdditionalInfo) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetCustomerName() {
		if err = oprot.WriteFieldBegin("customerName", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.CustomerName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *QueryQrisResponseAdditionalInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryQrisResponseAdditionalInfo(%+v)", *p)

}

type QueryQrisResponse struct {
	ResponseCode               *string                          `thrift:"responseCode,1,optional" form:"responseCode" json:"responseCode,omitempty" query:"responseCode"`
	ResponseMessage            *string                          `thrift:"responseMessage,2,optional" form:"responseMessage" json:"responseMessage,omitempty" query:"responseMessage"`
	OriginalReferenceNo        *string                          `thrift:"originalReferenceNo,3,optional" form:"originalReferenceNo" json:"originalReferenceNo,omitempty" query:"originalReferenceNo"`
	OriginalPartnerReferenceNo *string                          `thrift:"originalPartnerReferenceNo,4,optional" form:"originalPartnerReferenceNo" json:"originalPartnerReferenceNo,omitempty" query:"originalPartnerReferenceNo"`
	ServiceCode                *string                          `thrift:"serviceCode,5,optional" form:"serviceCode" json:"serviceCode,omitempty" query:"serviceCode"`
	LatestTransactionStatus    *string                          `thrift:"latestTransactionStatus,6,optional" form:"latestTransactionStatus" json:"latestTransactionStatus,omitempty" query:"latestTransactionStatus"`
	TransactionStatusDesc      *string                          `thrift:"transactionStatusDesc,7,optional" form:"transactionStatusDesc" json:"transactionStatusDesc,omitempty" query:"transactionStatusDesc"`
	PaidTime                   *string                          `thrift:"paidTime,8,optional" form:"paidTime" json:"paidTime,omitempty" query:"paidTime"`
	Amount                     *QueryQrisResponseAmount         `thrift:"amount,9,optional" form:"amount" json:"amount,omitempty" query:"amount"`
	FeeAmount                  *QueryQrisResponseAmount         `thrift:"feeAmount,10,optional" form:"feeAmount" json:"feeAmount,omitempty" query:"feeAmount"`
	AdditionalInfo             *QueryQrisResponseAdditionalInfo `thrift:"additionalInfo,11,optional" form:"additionalInfo" json:"additionalInfo,omitempty" query:"additionalInfo"`
}

func NewQueryQrisResponse() *QueryQrisResponse {
	return &QueryQrisResponse{}
}

func (p *QueryQrisResponse) InitDefault() {
}

var QueryQrisResponse_ResponseCode_DEFAULT string

func (p *QueryQrisResponse) GetResponseCode() (v string) {
	if !p.IsSetResponseCode() {
		return QueryQrisResponse_ResponseCode_DEFAULT
	}
	return *p.ResponseCode
}

var QueryQrisResponse_ResponseMessage_DEFAULT string

func (p *QueryQrisResponse) GetResponseMessage() (v string) {
	if !p.IsSetResponseMessage() {
		return QueryQrisResponse_ResponseMessage_DEFAULT
	}
	return *p.ResponseMessage
}

var QueryQrisResponse_OriginalReferenceNo_DEFAULT string

func (p *QueryQrisResponse) GetOriginalReferenceNo() (v string) {
	if !p.IsSetOriginalReferenceNo() {
		return QueryQrisResponse_OriginalReferenceNo_DEFAULT
	}
	return *p.OriginalReferenceNo
}

var QueryQrisResponse_OriginalPartnerReferenceNo_DEFAULT string

func (p *QueryQrisResponse) GetOriginalPartnerReferenceNo() (v string) {
	if !p.IsSetOriginalPartnerReferenceNo() {
		return QueryQrisResponse_OriginalPartnerReferenceNo_DEFAULT
	}
	return *p.OriginalPartnerReferenceNo
}

var QueryQrisResponse_ServiceCode_DEFAULT string

func (p *QueryQrisResponse) GetServiceCode() (v string) {
	if !p.IsSetServiceCode() {
		return QueryQrisResponse_ServiceCode_DEFAULT
	}
	return *p.ServiceCode
}

var QueryQrisResponse_LatestTransactionStatus_DEFAULT string

func (p *QueryQrisResponse) GetLatestTransactionStatus() (v string) {
	if !p.IsSetLatestTransactionStatus() {
		return QueryQrisResponse_LatestTransactionStatus_DEFAULT
	}
	return *p.LatestTransactionStatus
}

var QueryQrisResponse_TransactionStatusDesc_DEFAULT string

func (p *QueryQrisResponse) GetTransactionStatusDesc() (v string) {
	if !p.IsSetTransactionStatusDesc() {
		return QueryQrisResponse_TransactionStatusDesc_DEFAULT
	}
	return *p.TransactionStatusDesc
}

var QueryQrisResponse_PaidTime_DEFAULT string

func (p *QueryQrisResponse) GetPaidTime() (v string) {
	if !p.IsSetPaidTime() {
		return QueryQrisResponse_PaidTime_DEFAULT
	}
	return *p.PaidTime
}

var QueryQrisResponse_Amount_DEFAULT *QueryQrisResponseAmount

func (p *QueryQrisResponse) GetAmount() (v *QueryQrisResponseAmount) {
	if !p.IsSetAmount() {
		return QueryQrisResponse_Amount_DEFAULT
	}
	return p.Amount
}

var QueryQrisResponse_FeeAmount_DEFAULT *QueryQrisResponseAmount

func (p *QueryQrisResponse) GetFeeAmount() (v *QueryQrisResponseAmount) {
	if !p.IsSetFeeAmount() {
		return QueryQrisResponse_FeeAmount_DEFAULT
	}
	return p.FeeAmount
}

var QueryQrisResponse_AdditionalInfo_DEFAULT *QueryQrisResponseAdditionalInfo

func (p *QueryQrisResponse) GetAdditionalInfo() (v *QueryQrisResponseAdditionalInfo) {
	if !p.IsSetAdditionalInfo() {
		return QueryQrisResponse_AdditionalInfo_DEFAULT
	}
	return p.AdditionalInfo
}

var fieldIDToName_QueryQrisResponse = map[int16]string{
	1:  "responseCode",
	2:  "responseMessage",
	3:  "originalReferenceNo",
	4:  "originalPartnerReferenceNo",
	5:  "serviceCode",
	6:  "latestTransactionStatus",
	7:  "transactionStatusDesc",
	8:  "paidTime",
	9:  "amount",
	10: "feeAmount",
	11: "additionalInfo",
}

func (p *QueryQrisResponse) IsSetResponseCode() bool {
	return p.ResponseCode != nil
}

func (p *QueryQrisResponse) IsSetResponseMessage() bool {
	return p.ResponseMessage != nil
}

func (p *QueryQrisResponse) IsSetOriginalReferenceNo() bool {
	return p.OriginalReferenceNo != nil
}

func (p *QueryQrisResponse) IsSetOriginalPartnerReferenceNo() bool {
	return p.OriginalPartnerReferenceNo != nil
}

func (p *QueryQrisResponse) IsSetServiceCode() bool {
	return p.ServiceCode != nil
}

func (p *QueryQrisResponse) IsSetLatestTransactionStatus() bool {
	return p.LatestTransactionStatus != nil
}

func (p *QueryQrisResponse) IsSetTransactionStatusDesc() bool {
	return p.TransactionStatusDesc != nil
}

func (p *QueryQrisResponse) IsSetPaidTime() bool {
	return p.PaidTime != nil
}

func (p *QueryQrisResponse) IsSetAmount() bool {
	return p.Amount != nil
}

func (p *QueryQrisResponse) IsSetFeeAmount() bool {
	return p.FeeAmount != nil
}

func (p *QueryQrisResponse) IsSetAdditionalInfo() bool {
	return p.AdditionalInfo != nil
}

func (p *QueryQrisResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_QueryQrisResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *QueryQrisResponse) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ResponseCode = _field
	return nil
}
func (p *QueryQrisResponse) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ResponseMessage = _field
	return nil
}
func (p *QueryQrisResponse) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.OriginalReferenceNo = _field
	return nil
}
func (p *QueryQrisResponse) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.OriginalPartnerReferenceNo = _field
	return nil
}
func (p *QueryQrisResponse) ReadField5(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ServiceCode = _field
	return nil
}
func (p *QueryQrisResponse) ReadField6(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.LatestTransactionStatus = _field
	return nil
}
func (p *QueryQrisResponse) ReadField7(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TransactionStatusDesc = _field
	return nil
}
func (p *QueryQrisResponse) ReadField8(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PaidTime = _field
	return nil
}
func (p *QueryQrisResponse) ReadField9(iprot thrift.TProtocol) error {
	_field := NewQueryQrisResponseAmount()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Amount = _field
	return nil
}
func (p *QueryQrisResponse) ReadField10(iprot thrift.TProtocol) error {
	_field := NewQueryQrisResponseAmount()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.FeeAmount = _field
	return nil
}
func (p *QueryQrisResponse) ReadField11(iprot thrift.TProtocol) error {
	_field := NewQueryQrisResponseAdditionalInfo()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.AdditionalInfo = _field
	return nil
}

func (p *QueryQrisResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("QueryQrisResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *QueryQrisResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetResponseCode() {
		if err = oprot.WriteFieldBegin("responseCode", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ResponseCode); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *QueryQrisResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetResponseMessage() {
		if err = oprot.WriteFieldBegin("responseMessage", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ResponseMessage); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *QueryQrisResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetOriginalReferenceNo() {
		if err = oprot.WriteFieldBegin("originalReferenceNo", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.OriginalReferenceNo); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *QueryQrisResponse) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetOriginalPartnerReferenceNo() {
		if err = oprot.WriteFieldBegin("originalPartnerReferenceNo", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.OriginalPartnerReferenceNo); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *QueryQrisResponse) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetServiceCode() {
		if err = oprot.WriteFieldBegin("serviceCode", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ServiceCode); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *QueryQrisResponse) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetLatestTransactionStatus() {
		if err = oprot.WriteFieldBegin("latestTransactionStatus", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.LatestTransactionStatus); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *QueryQrisResponse) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetTransactionStatusDesc() {
		if err = oprot.WriteFieldBegin("transactionStatusDesc", thrift.STRING, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.TransactionStatusDesc); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *QueryQrisResponse) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetPaidTime() {
		if err = oprot.WriteFieldBegin("paidTime", thrift.STRING, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.PaidTime); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *QueryQrisResponse) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetAmount() {
		if err = oprot.WriteFieldBegin("amount", thrift.STRUCT, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Amount.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *QueryQrisResponse) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetFeeAmount() {
		if err = oprot.WriteFieldBegin("feeAmount", thrift.STRUCT, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.FeeAmount.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *QueryQrisResponse) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetAdditionalInfo() {
		if err = oprot.WriteFieldBegin("additionalInfo", thrift.STRUCT, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.AdditionalInfo.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *QueryQrisResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryQrisResponse(%+v)", *p)

}

type RefundQrisResponse struct {
	ResponseCode               *string                  `thrift:"responseCode,1,optional" form:"responseCode" json:"responseCode,omitempty" query:"responseCode"`
	ResponseMessage            *string                  `thrift:"responseMessage,2,optional" form:"responseMessage" json:"responseMessage,omitempty" query:"responseMessage"`
	OriginalReferenceNo        *string                  `thrift:"originalReferenceNo,3,optional" form:"originalReferenceNo" json:"originalReferenceNo,omitempty" query:"originalReferenceNo"`
	OriginalPartnerReferenceNo *string                  `thrift:"originalPartnerReferenceNo,4,optional" form:"originalPartnerReferenceNo" json:"originalPartnerReferenceNo,omitempty" query:"originalPartnerReferenceNo"`
	RefundNo                   *string                  `thrift:"refundNo,5,optional" form:"refundNo" json:"refundNo,omitempty" query:"refundNo"`
	PartnerRefundNo            *string                  `thrift:"partnerRefundNo,6,optional" form:"partnerRefundNo" json:"partnerRefundNo,omitempty" query:"partnerRefundNo"`
	RefundAmount               *QueryQrisResponseAmount `thrift:"refundAmount,7,optional" form:"refundAmount" json:"refundAmount,omitempty" query:"refundAmount"`
	RefundTime                 *string                  `thrift:"refundTime,8,optional" form:"refundTime" json:"refundTime,omitempty" query:"refundTime"`
}

func NewRefundQrisResponse() *RefundQrisResponse {
	return &RefundQrisResponse{}
}

func (p *RefundQrisResponse) InitDefault() {
}

var RefundQrisResponse_ResponseCode_DEFAULT string

func (p *RefundQrisResponse) GetResponseCode() (v string) {
	if !p.IsSetResponseCode() {
		return RefundQrisResponse_ResponseCode_DEFAULT
	}
	return *p.ResponseCode
}

var RefundQrisResponse_ResponseMessage_DEFAULT string

func (p *RefundQrisResponse) GetResponseMessage() (v string) {
	if !p.IsSetResponseMessage() {
		return RefundQrisResponse_ResponseMessage_DEFAULT
	}
	return *p.ResponseMessage
}

var RefundQrisResponse_OriginalReferenceNo_DEFAULT string

func (p *RefundQrisResponse) GetOriginalReferenceNo() (v string) {
	if !p.IsSetOriginalReferenceNo() {
		return RefundQrisResponse_OriginalReferenceNo_DEFAULT
	}
	return *p.OriginalReferenceNo
}

var RefundQrisResponse_OriginalPartnerReferenceNo_DEFAULT string

func (p *RefundQrisResponse) GetOriginalPartnerReferenceNo() (v string) {
	if !p.IsSetOriginalPartnerReferenceNo() {
		return RefundQrisResponse_OriginalPartnerReferenceNo_DEFAULT
	}
	return *p.OriginalPartnerReferenceNo
}

var RefundQrisResponse_RefundNo_DEFAULT string

func (p *RefundQrisResponse) GetRefundNo() (v string) {
	if !p.IsSetRefundNo() {
		return RefundQrisResponse_RefundNo_DEFAULT
	}
	return *p.RefundNo
}

var RefundQrisResponse_PartnerRefundNo_DEFAULT string

func (p *RefundQrisResponse) GetPartnerRefundNo() (v string) {
	if !p.IsSetPartnerRefundNo() {
		return RefundQrisResponse_PartnerRefundNo_DEFAULT
	}
	return *p.PartnerRefundNo
}

var RefundQrisResponse_RefundAmount_DEFAULT *QueryQrisResponseAmount

func (p *RefundQrisResponse) GetRefundAmount() (v *QueryQrisResponseAmount) {
	if !p.IsSetRefundAmount() {
		return RefundQrisResponse_RefundAmount_DEFAULT
	}
	return p.RefundAmount
}

var RefundQrisResponse_RefundTime_DEFAULT string

func (p *RefundQrisResponse) GetRefundTime() (v string) {
	if !p.IsSetRefundTime() {
		return RefundQrisResponse_RefundTime_DEFAULT
	}
	return *p.RefundTime
}

var fieldIDToName_RefundQrisResponse = map[int16]string{
	1: "responseCode",
	2: "responseMessage",
	3: "originalReferenceNo",
	4: "originalPartnerReferenceNo",
	5: "refundNo",
	6: "partnerRefundNo",
	7: "refundAmount",
	8: "refundTime",
}

func (p *RefundQrisResponse) IsSetResponseCode() bool {
	return p.ResponseCode != nil
}

func (p *RefundQrisResponse) IsSetResponseMessage() bool {
	return p.ResponseMessage != nil
}

func (p *RefundQrisResponse) IsSetOriginalReferenceNo() bool {
	return p.OriginalReferenceNo != nil
}

func (p *RefundQrisResponse) IsSetOriginalPartnerReferenceNo() bool {
	return p.OriginalPartnerReferenceNo != nil
}

func (p *RefundQrisResponse) IsSetRefundNo() bool {
	return p.RefundNo != nil
}

func (p *RefundQrisResponse) IsSetPartnerRefundNo() bool {
	return p.PartnerRefundNo != nil
}

func (p *RefundQrisResponse) IsSetRefundAmount() bool {
	return p.RefundAmount != nil
}

func (p *RefundQrisResponse) IsSetRefundTime() bool {
	return p.RefundTime != nil
}

func (p *RefundQrisResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_RefundQrisResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *RefundQrisResponse) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ResponseCode = _field
	return nil
}
func (p *RefundQrisResponse) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ResponseMessage = _field
	return nil
}
func (p *RefundQrisResponse) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.OriginalReferenceNo = _field
	return nil
}
func (p *RefundQrisResponse) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.OriginalPartnerReferenceNo = _field
	return nil
}
func (p *RefundQrisResponse) ReadField5(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.RefundNo = _field
	return nil
}
func (p *RefundQrisResponse) ReadField6(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PartnerRefundNo = _field
	return nil
}
func (p *RefundQrisResponse) ReadField7(iprot thrift.TProtocol) error {
	_field := NewQueryQrisResponseAmount()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.RefundAmount = _field
	return nil
}
func (p *RefundQrisResponse) ReadField8(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.RefundTime = _field
	return nil
}

func (p *RefundQrisResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("RefundQrisResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *RefundQrisResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetResponseCode() {
		if err = oprot.WriteFieldBegin("responseCode", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ResponseCode); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *RefundQrisResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetResponseMessage() {
		if err = oprot.WriteFieldBegin("responseMessage", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ResponseMessage); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *RefundQrisResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetOriginalReferenceNo() {
		if err = oprot.WriteFieldBegin("originalReferenceNo", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.OriginalReferenceNo); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *RefundQrisResponse) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetOriginalPartnerReferenceNo() {
		if err = oprot.WriteFieldBegin("originalPartnerReferenceNo", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.OriginalPartnerReferenceNo); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *RefundQrisResponse) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetRefundNo() {
		if err = oprot.WriteFieldBegin("refundNo", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.RefundNo); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *RefundQrisResponse) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetPartnerRefundNo() {
		if err = oprot.WriteFieldBegin("partnerRefundNo", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.PartnerRefundNo); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *RefundQrisResponse) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetRefundAmount() {
		if err = oprot.WriteFieldBegin("refundAmount", thrift.STRUCT, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.RefundAmount.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *RefundQrisResponse) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetRefundTime() {
		if err = oprot.WriteFieldBegin("refundTime", thrift.STRING, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.RefundTime); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *RefundQrisResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RefundQrisResponse(%+v)", *p)

}

type MerchantInfo struct {
	MemrchantPAN string `thrift:"memrchantPAN,1" form:"memrchantPAN" json:"memrchantPAN" query:"memrchantPAN"`
	AcquirerName string `thrift:"acquirerName,2" form:"acquirerName" json:"acquirerName" query:"acquirerName"`
}

func NewMerchantInfo() *MerchantInfo {
	return &MerchantInfo{}
}

func (p *MerchantInfo) InitDefault() {
}

func (p *MerchantInfo) GetMemrchantPAN() (v string) {
	return p.MemrchantPAN
}

func (p *MerchantInfo) GetAcquirerName() (v string) {
	return p.AcquirerName
}

var fieldIDToName_MerchantInfo = map[int16]string{
	1: "memrchantPAN",
	2: "acquirerName",
}

func (p *MerchantInfo) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MerchantInfo[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MerchantInfo) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.MemrchantPAN = _field
	return nil
}
func (p *MerchantInfo) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.AcquirerName = _field
	return nil
}

func (p *MerchantInfo) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("MerchantInfo"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MerchantInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("memrchantPAN", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.MemrchantPAN); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MerchantInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("acquirerName", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.AcquirerName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *MerchantInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MerchantInfo(%+v)", *p)

}

type DecodeQrisResponseAdditionalInfo struct {
	PointOfInitiationMethod            string `thrift:"pointOfInitiationMethod,1" form:"pointOfInitiationMethod" json:"pointOfInitiationMethod" query:"pointOfInitiationMethod"`
	PointOfInitiationMethodDescription string `thrift:"pointOfInitiationMethodDescription,2" form:"pointOfInitiationMethodDescription" json:"pointOfInitiationMethodDescription" query:"pointOfInitiationMethodDescription"`
	FeeType                            string `thrift:"feeType,3" form:"feeType" json:"feeType" query:"feeType"`
	FeeTypeDescription                 string `thrift:"feeTypeDescription,4" form:"feeTypeDescription" json:"feeTypeDescription" query:"feeTypeDescription"`
}

func NewDecodeQrisResponseAdditionalInfo() *DecodeQrisResponseAdditionalInfo {
	return &DecodeQrisResponseAdditionalInfo{}
}

func (p *DecodeQrisResponseAdditionalInfo) InitDefault() {
}

func (p *DecodeQrisResponseAdditionalInfo) GetPointOfInitiationMethod() (v string) {
	return p.PointOfInitiationMethod
}

func (p *DecodeQrisResponseAdditionalInfo) GetPointOfInitiationMethodDescription() (v string) {
	return p.PointOfInitiationMethodDescription
}

func (p *DecodeQrisResponseAdditionalInfo) GetFeeType() (v string) {
	return p.FeeType
}

func (p *DecodeQrisResponseAdditionalInfo) GetFeeTypeDescription() (v string) {
	return p.FeeTypeDescription
}

var fieldIDToName_DecodeQrisResponseAdditionalInfo = map[int16]string{
	1: "pointOfInitiationMethod",
	2: "pointOfInitiationMethodDescription",
	3: "feeType",
	4: "feeTypeDescription",
}

func (p *DecodeQrisResponseAdditionalInfo) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DecodeQrisResponseAdditionalInfo[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DecodeQrisResponseAdditionalInfo) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PointOfInitiationMethod = _field
	return nil
}
func (p *DecodeQrisResponseAdditionalInfo) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PointOfInitiationMethodDescription = _field
	return nil
}
func (p *DecodeQrisResponseAdditionalInfo) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.FeeType = _field
	return nil
}
func (p *DecodeQrisResponseAdditionalInfo) ReadField4(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.FeeTypeDescription = _field
	return nil
}

func (p *DecodeQrisResponseAdditionalInfo) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DecodeQrisResponseAdditionalInfo"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DecodeQrisResponseAdditionalInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("pointOfInitiationMethod", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.PointOfInitiationMethod); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DecodeQrisResponseAdditionalInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("pointOfInitiationMethodDescription", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.PointOfInitiationMethodDescription); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *DecodeQrisResponseAdditionalInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("feeType", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.FeeType); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *DecodeQrisResponseAdditionalInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("feeTypeDescription", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.FeeTypeDescription); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *DecodeQrisResponseAdditionalInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DecodeQrisResponseAdditionalInfo(%+v)", *p)

}

type DecodeQrisResponse struct {
	ResponseCode       string                            `thrift:"responseCode,1" form:"responseCode" json:"responseCode" query:"responseCode"`
	PostalCode         *string                           `thrift:"postalCode,2,optional" form:"postalCode" json:"postalCode,omitempty" query:"postalCode"`
	ResponseMessage    string                            `thrift:"responseMessage,3" form:"responseMessage" json:"responseMessage" query:"responseMessage"`
	ReferenceNo        *string                           `thrift:"referenceNo,4,optional" form:"referenceNo" json:"referenceNo,omitempty" query:"referenceNo"`
	PartnerReferenceNo *string                           `thrift:"partnerReferenceNo,5,optional" form:"partnerReferenceNo" json:"partnerReferenceNo,omitempty" query:"partnerReferenceNo"`
	MerchantName       *string                           `thrift:"merchantName,6,optional" form:"merchantName" json:"merchantName,omitempty" query:"merchantName"`
	TransactionAmount  *QueryQrisResponseAmount          `thrift:"transactionAmount,7,optional" form:"transactionAmount" json:"transactionAmount,omitempty" query:"transactionAmount"`
	MerchantInfos      []*MerchantInfo                   `thrift:"merchantInfos,8,default,list<MerchantInfo>" form:"merchantInfos" json:"merchantInfos" query:"merchantInfos"`
	FeeAmount          *DecodeQrisResponseAdditionalInfo `thrift:"feeAmount,9,optional" form:"feeAmount" json:"feeAmount,omitempty" query:"feeAmount"`
}

func NewDecodeQrisResponse() *DecodeQrisResponse {
	return &DecodeQrisResponse{}
}

func (p *DecodeQrisResponse) InitDefault() {
}

func (p *DecodeQrisResponse) GetResponseCode() (v string) {
	return p.ResponseCode
}

var DecodeQrisResponse_PostalCode_DEFAULT string

func (p *DecodeQrisResponse) GetPostalCode() (v string) {
	if !p.IsSetPostalCode() {
		return DecodeQrisResponse_PostalCode_DEFAULT
	}
	return *p.PostalCode
}

func (p *DecodeQrisResponse) GetResponseMessage() (v string) {
	return p.ResponseMessage
}

var DecodeQrisResponse_ReferenceNo_DEFAULT string

func (p *DecodeQrisResponse) GetReferenceNo() (v string) {
	if !p.IsSetReferenceNo() {
		return DecodeQrisResponse_ReferenceNo_DEFAULT
	}
	return *p.ReferenceNo
}

var DecodeQrisResponse_PartnerReferenceNo_DEFAULT string

func (p *DecodeQrisResponse) GetPartnerReferenceNo() (v string) {
	if !p.IsSetPartnerReferenceNo() {
		return DecodeQrisResponse_PartnerReferenceNo_DEFAULT
	}
	return *p.PartnerReferenceNo
}

var DecodeQrisResponse_MerchantName_DEFAULT string

func (p *DecodeQrisResponse) GetMerchantName() (v string) {
	if !p.IsSetMerchantName() {
		return DecodeQrisResponse_MerchantName_DEFAULT
	}
	return *p.MerchantName
}

var DecodeQrisResponse_TransactionAmount_DEFAULT *QueryQrisResponseAmount

func (p *DecodeQrisResponse) GetTransactionAmount() (v *QueryQrisResponseAmount) {
	if !p.IsSetTransactionAmount() {
		return DecodeQrisResponse_TransactionAmount_DEFAULT
	}
	return p.TransactionAmount
}

func (p *DecodeQrisResponse) GetMerchantInfos() (v []*MerchantInfo) {
	return p.MerchantInfos
}

var DecodeQrisResponse_FeeAmount_DEFAULT *DecodeQrisResponseAdditionalInfo

func (p *DecodeQrisResponse) GetFeeAmount() (v *DecodeQrisResponseAdditionalInfo) {
	if !p.IsSetFeeAmount() {
		return DecodeQrisResponse_FeeAmount_DEFAULT
	}
	return p.FeeAmount
}

var fieldIDToName_DecodeQrisResponse = map[int16]string{
	1: "responseCode",
	2: "postalCode",
	3: "responseMessage",
	4: "referenceNo",
	5: "partnerReferenceNo",
	6: "merchantName",
	7: "transactionAmount",
	8: "merchantInfos",
	9: "feeAmount",
}

func (p *DecodeQrisResponse) IsSetPostalCode() bool {
	return p.PostalCode != nil
}

func (p *DecodeQrisResponse) IsSetReferenceNo() bool {
	return p.ReferenceNo != nil
}

func (p *DecodeQrisResponse) IsSetPartnerReferenceNo() bool {
	return p.PartnerReferenceNo != nil
}

func (p *DecodeQrisResponse) IsSetMerchantName() bool {
	return p.MerchantName != nil
}

func (p *DecodeQrisResponse) IsSetTransactionAmount() bool {
	return p.TransactionAmount != nil
}

func (p *DecodeQrisResponse) IsSetFeeAmount() bool {
	return p.FeeAmount != nil
}

func (p *DecodeQrisResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DecodeQrisResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DecodeQrisResponse) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ResponseCode = _field
	return nil
}
func (p *DecodeQrisResponse) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PostalCode = _field
	return nil
}
func (p *DecodeQrisResponse) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ResponseMessage = _field
	return nil
}
func (p *DecodeQrisResponse) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ReferenceNo = _field
	return nil
}
func (p *DecodeQrisResponse) ReadField5(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PartnerReferenceNo = _field
	return nil
}
func (p *DecodeQrisResponse) ReadField6(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.MerchantName = _field
	return nil
}
func (p *DecodeQrisResponse) ReadField7(iprot thrift.TProtocol) error {
	_field := NewQueryQrisResponseAmount()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.TransactionAmount = _field
	return nil
}
func (p *DecodeQrisResponse) ReadField8(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*MerchantInfo, 0, size)
	values := make([]MerchantInfo, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.MerchantInfos = _field
	return nil
}
func (p *DecodeQrisResponse) ReadField9(iprot thrift.TProtocol) error {
	_field := NewDecodeQrisResponseAdditionalInfo()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.FeeAmount = _field
	return nil
}

func (p *DecodeQrisResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DecodeQrisResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DecodeQrisResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("responseCode", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ResponseCode); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DecodeQrisResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPostalCode() {
		if err = oprot.WriteFieldBegin("postalCode", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.PostalCode); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *DecodeQrisResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("responseMessage", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ResponseMessage); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *DecodeQrisResponse) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetReferenceNo() {
		if err = oprot.WriteFieldBegin("referenceNo", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ReferenceNo); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *DecodeQrisResponse) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetPartnerReferenceNo() {
		if err = oprot.WriteFieldBegin("partnerReferenceNo", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.PartnerReferenceNo); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *DecodeQrisResponse) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetMerchantName() {
		if err = oprot.WriteFieldBegin("merchantName", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.MerchantName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *DecodeQrisResponse) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetTransactionAmount() {
		if err = oprot.WriteFieldBegin("transactionAmount", thrift.STRUCT, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.TransactionAmount.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *DecodeQrisResponse) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("merchantInfos", thrift.LIST, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.MerchantInfos)); err != nil {
		return err
	}
	for _, v := range p.MerchantInfos {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *DecodeQrisResponse) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetFeeAmount() {
		if err = oprot.WriteFieldBegin("feeAmount", thrift.STRUCT, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.FeeAmount.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *DecodeQrisResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DecodeQrisResponse(%+v)", *p)

}

type PaymentQrisResponse struct {
	ResponseCode       *string                  `thrift:"responseCode,1,optional" form:"responseCode" json:"responseCode,omitempty" query:"responseCode"`
	ResponseMessage    *string                  `thrift:"responseMessage,2,optional" form:"responseMessage" json:"responseMessage,omitempty" query:"responseMessage"`
	ReferenceNo        *string                  `thrift:"referenceNo,3,optional" form:"referenceNo" json:"referenceNo,omitempty" query:"referenceNo"`
	PartnerReferenceNo *string                  `thrift:"partnerReferenceNo,4,optional" form:"partnerReferenceNo" json:"partnerReferenceNo,omitempty" query:"partnerReferenceNo"`
	Amount             *QueryQrisResponseAmount `thrift:"amount,5,optional" form:"amount" json:"amount,omitempty" query:"amount"`
	FeeAmount          *QueryQrisResponseAmount `thrift:"feeAmount,6,optional" form:"feeAmount" json:"feeAmount,omitempty" query:"feeAmount"`
}

func NewPaymentQrisResponse() *PaymentQrisResponse {
	return &PaymentQrisResponse{}
}

func (p *PaymentQrisResponse) InitDefault() {
}

var PaymentQrisResponse_ResponseCode_DEFAULT string

func (p *PaymentQrisResponse) GetResponseCode() (v string) {
	if !p.IsSetResponseCode() {
		return PaymentQrisResponse_ResponseCode_DEFAULT
	}
	return *p.ResponseCode
}

var PaymentQrisResponse_ResponseMessage_DEFAULT string

func (p *PaymentQrisResponse) GetResponseMessage() (v string) {
	if !p.IsSetResponseMessage() {
		return PaymentQrisResponse_ResponseMessage_DEFAULT
	}
	return *p.ResponseMessage
}

var PaymentQrisResponse_ReferenceNo_DEFAULT string

func (p *PaymentQrisResponse) GetReferenceNo() (v string) {
	if !p.IsSetReferenceNo() {
		return PaymentQrisResponse_ReferenceNo_DEFAULT
	}
	return *p.ReferenceNo
}

var PaymentQrisResponse_PartnerReferenceNo_DEFAULT string

func (p *PaymentQrisResponse) GetPartnerReferenceNo() (v string) {
	if !p.IsSetPartnerReferenceNo() {
		return PaymentQrisResponse_PartnerReferenceNo_DEFAULT
	}
	return *p.PartnerReferenceNo
}

var PaymentQrisResponse_Amount_DEFAULT *QueryQrisResponseAmount

func (p *PaymentQrisResponse) GetAmount() (v *QueryQrisResponseAmount) {
	if !p.IsSetAmount() {
		return PaymentQrisResponse_Amount_DEFAULT
	}
	return p.Amount
}

var PaymentQrisResponse_FeeAmount_DEFAULT *QueryQrisResponseAmount

func (p *PaymentQrisResponse) GetFeeAmount() (v *QueryQrisResponseAmount) {
	if !p.IsSetFeeAmount() {
		return PaymentQrisResponse_FeeAmount_DEFAULT
	}
	return p.FeeAmount
}

var fieldIDToName_PaymentQrisResponse = map[int16]string{
	1: "responseCode",
	2: "responseMessage",
	3: "referenceNo",
	4: "partnerReferenceNo",
	5: "amount",
	6: "feeAmount",
}

func (p *PaymentQrisResponse) IsSetResponseCode() bool {
	return p.ResponseCode != nil
}

func (p *PaymentQrisResponse) IsSetResponseMessage() bool {
	return p.ResponseMessage != nil
}

func (p *PaymentQrisResponse) IsSetReferenceNo() bool {
	return p.ReferenceNo != nil
}

func (p *PaymentQrisResponse) IsSetPartnerReferenceNo() bool {
	return p.PartnerReferenceNo != nil
}

func (p *PaymentQrisResponse) IsSetAmount() bool {
	return p.Amount != nil
}

func (p *PaymentQrisResponse) IsSetFeeAmount() bool {
	return p.FeeAmount != nil
}

func (p *PaymentQrisResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PaymentQrisResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PaymentQrisResponse) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ResponseCode = _field
	return nil
}
func (p *PaymentQrisResponse) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ResponseMessage = _field
	return nil
}
func (p *PaymentQrisResponse) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ReferenceNo = _field
	return nil
}
func (p *PaymentQrisResponse) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PartnerReferenceNo = _field
	return nil
}
func (p *PaymentQrisResponse) ReadField5(iprot thrift.TProtocol) error {
	_field := NewQueryQrisResponseAmount()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Amount = _field
	return nil
}
func (p *PaymentQrisResponse) ReadField6(iprot thrift.TProtocol) error {
	_field := NewQueryQrisResponseAmount()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.FeeAmount = _field
	return nil
}

func (p *PaymentQrisResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PaymentQrisResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PaymentQrisResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetResponseCode() {
		if err = oprot.WriteFieldBegin("responseCode", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ResponseCode); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PaymentQrisResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetResponseMessage() {
		if err = oprot.WriteFieldBegin("responseMessage", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ResponseMessage); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *PaymentQrisResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetReferenceNo() {
		if err = oprot.WriteFieldBegin("referenceNo", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ReferenceNo); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *PaymentQrisResponse) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetPartnerReferenceNo() {
		if err = oprot.WriteFieldBegin("partnerReferenceNo", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.PartnerReferenceNo); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *PaymentQrisResponse) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetAmount() {
		if err = oprot.WriteFieldBegin("amount", thrift.STRUCT, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Amount.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *PaymentQrisResponse) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetFeeAmount() {
		if err = oprot.WriteFieldBegin("feeAmount", thrift.STRUCT, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.FeeAmount.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *PaymentQrisResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PaymentQrisResponse(%+v)", *p)

}

type QrisService interface {
	// After customer creates an order and choose QRIS as the payment method,
	// merchant will hit this API to generate QRIS that will be shown to the customer.
	GenerateQris(ctx context.Context) (r *GenerateQrisResponse, err error)

	QueryQris(ctx context.Context) (r *QueryQrisResponse, err error)

	RefundQris(ctx context.Context) (r *RefundQrisResponse, err error)

	DecodeQris(ctx context.Context) (r *DecodeQrisResponse, err error)

	PaymentQris(ctx context.Context) (r *PaymentQrisResponse, err error)
}

type QrisServiceClient struct {
	c thrift.TClient
}

func NewQrisServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *QrisServiceClient {
	return &QrisServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewQrisServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *QrisServiceClient {
	return &QrisServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewQrisServiceClient(c thrift.TClient) *QrisServiceClient {
	return &QrisServiceClient{
		c: c,
	}
}

func (p *QrisServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *QrisServiceClient) GenerateQris(ctx context.Context) (r *GenerateQrisResponse, err error) {
	var _args QrisServiceGenerateQrisArgs
	var _result QrisServiceGenerateQrisResult
	if err = p.Client_().Call(ctx, "GenerateQris", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *QrisServiceClient) QueryQris(ctx context.Context) (r *QueryQrisResponse, err error) {
	var _args QrisServiceQueryQrisArgs
	var _result QrisServiceQueryQrisResult
	if err = p.Client_().Call(ctx, "QueryQris", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *QrisServiceClient) RefundQris(ctx context.Context) (r *RefundQrisResponse, err error) {
	var _args QrisServiceRefundQrisArgs
	var _result QrisServiceRefundQrisResult
	if err = p.Client_().Call(ctx, "RefundQris", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *QrisServiceClient) DecodeQris(ctx context.Context) (r *DecodeQrisResponse, err error) {
	var _args QrisServiceDecodeQrisArgs
	var _result QrisServiceDecodeQrisResult
	if err = p.Client_().Call(ctx, "DecodeQris", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *QrisServiceClient) PaymentQris(ctx context.Context) (r *PaymentQrisResponse, err error) {
	var _args QrisServicePaymentQrisArgs
	var _result QrisServicePaymentQrisResult
	if err = p.Client_().Call(ctx, "PaymentQris", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type QrisServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      QrisService
}

func (p *QrisServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *QrisServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *QrisServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewQrisServiceProcessor(handler QrisService) *QrisServiceProcessor {
	self := &QrisServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("GenerateQris", &qrisServiceProcessorGenerateQris{handler: handler})
	self.AddToProcessorMap("QueryQris", &qrisServiceProcessorQueryQris{handler: handler})
	self.AddToProcessorMap("RefundQris", &qrisServiceProcessorRefundQris{handler: handler})
	self.AddToProcessorMap("DecodeQris", &qrisServiceProcessorDecodeQris{handler: handler})
	self.AddToProcessorMap("PaymentQris", &qrisServiceProcessorPaymentQris{handler: handler})
	return self
}
func (p *QrisServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type qrisServiceProcessorGenerateQris struct {
	handler QrisService
}

func (p *qrisServiceProcessorGenerateQris) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := QrisServiceGenerateQrisArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GenerateQris", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := QrisServiceGenerateQrisResult{}
	var retval *GenerateQrisResponse
	if retval, err2 = p.handler.GenerateQris(ctx); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GenerateQris: "+err2.Error())
		oprot.WriteMessageBegin("GenerateQris", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GenerateQris", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type qrisServiceProcessorQueryQris struct {
	handler QrisService
}

func (p *qrisServiceProcessorQueryQris) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := QrisServiceQueryQrisArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("QueryQris", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := QrisServiceQueryQrisResult{}
	var retval *QueryQrisResponse
	if retval, err2 = p.handler.QueryQris(ctx); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing QueryQris: "+err2.Error())
		oprot.WriteMessageBegin("QueryQris", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("QueryQris", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type qrisServiceProcessorRefundQris struct {
	handler QrisService
}

func (p *qrisServiceProcessorRefundQris) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := QrisServiceRefundQrisArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("RefundQris", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := QrisServiceRefundQrisResult{}
	var retval *RefundQrisResponse
	if retval, err2 = p.handler.RefundQris(ctx); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing RefundQris: "+err2.Error())
		oprot.WriteMessageBegin("RefundQris", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("RefundQris", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type qrisServiceProcessorDecodeQris struct {
	handler QrisService
}

func (p *qrisServiceProcessorDecodeQris) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := QrisServiceDecodeQrisArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("DecodeQris", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := QrisServiceDecodeQrisResult{}
	var retval *DecodeQrisResponse
	if retval, err2 = p.handler.DecodeQris(ctx); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DecodeQris: "+err2.Error())
		oprot.WriteMessageBegin("DecodeQris", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("DecodeQris", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type qrisServiceProcessorPaymentQris struct {
	handler QrisService
}

func (p *qrisServiceProcessorPaymentQris) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := QrisServicePaymentQrisArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("PaymentQris", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := QrisServicePaymentQrisResult{}
	var retval *PaymentQrisResponse
	if retval, err2 = p.handler.PaymentQris(ctx); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing PaymentQris: "+err2.Error())
		oprot.WriteMessageBegin("PaymentQris", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("PaymentQris", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type QrisServiceGenerateQrisArgs struct {
}

func NewQrisServiceGenerateQrisArgs() *QrisServiceGenerateQrisArgs {
	return &QrisServiceGenerateQrisArgs{}
}

func (p *QrisServiceGenerateQrisArgs) InitDefault() {
}

var fieldIDToName_QrisServiceGenerateQrisArgs = map[int16]string{}

func (p *QrisServiceGenerateQrisArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *QrisServiceGenerateQrisArgs) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("GenerateQris_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *QrisServiceGenerateQrisArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QrisServiceGenerateQrisArgs(%+v)", *p)

}

type QrisServiceGenerateQrisResult struct {
	Success *GenerateQrisResponse `thrift:"success,0,optional"`
}

func NewQrisServiceGenerateQrisResult() *QrisServiceGenerateQrisResult {
	return &QrisServiceGenerateQrisResult{}
}

func (p *QrisServiceGenerateQrisResult) InitDefault() {
}

var QrisServiceGenerateQrisResult_Success_DEFAULT *GenerateQrisResponse

func (p *QrisServiceGenerateQrisResult) GetSuccess() (v *GenerateQrisResponse) {
	if !p.IsSetSuccess() {
		return QrisServiceGenerateQrisResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_QrisServiceGenerateQrisResult = map[int16]string{
	0: "success",
}

func (p *QrisServiceGenerateQrisResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *QrisServiceGenerateQrisResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_QrisServiceGenerateQrisResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *QrisServiceGenerateQrisResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewGenerateQrisResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *QrisServiceGenerateQrisResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GenerateQris_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *QrisServiceGenerateQrisResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *QrisServiceGenerateQrisResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QrisServiceGenerateQrisResult(%+v)", *p)

}

type QrisServiceQueryQrisArgs struct {
}

func NewQrisServiceQueryQrisArgs() *QrisServiceQueryQrisArgs {
	return &QrisServiceQueryQrisArgs{}
}

func (p *QrisServiceQueryQrisArgs) InitDefault() {
}

var fieldIDToName_QrisServiceQueryQrisArgs = map[int16]string{}

func (p *QrisServiceQueryQrisArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *QrisServiceQueryQrisArgs) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("QueryQris_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *QrisServiceQueryQrisArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QrisServiceQueryQrisArgs(%+v)", *p)

}

type QrisServiceQueryQrisResult struct {
	Success *QueryQrisResponse `thrift:"success,0,optional"`
}

func NewQrisServiceQueryQrisResult() *QrisServiceQueryQrisResult {
	return &QrisServiceQueryQrisResult{}
}

func (p *QrisServiceQueryQrisResult) InitDefault() {
}

var QrisServiceQueryQrisResult_Success_DEFAULT *QueryQrisResponse

func (p *QrisServiceQueryQrisResult) GetSuccess() (v *QueryQrisResponse) {
	if !p.IsSetSuccess() {
		return QrisServiceQueryQrisResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_QrisServiceQueryQrisResult = map[int16]string{
	0: "success",
}

func (p *QrisServiceQueryQrisResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *QrisServiceQueryQrisResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_QrisServiceQueryQrisResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *QrisServiceQueryQrisResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewQueryQrisResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *QrisServiceQueryQrisResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("QueryQris_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *QrisServiceQueryQrisResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *QrisServiceQueryQrisResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QrisServiceQueryQrisResult(%+v)", *p)

}

type QrisServiceRefundQrisArgs struct {
}

func NewQrisServiceRefundQrisArgs() *QrisServiceRefundQrisArgs {
	return &QrisServiceRefundQrisArgs{}
}

func (p *QrisServiceRefundQrisArgs) InitDefault() {
}

var fieldIDToName_QrisServiceRefundQrisArgs = map[int16]string{}

func (p *QrisServiceRefundQrisArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *QrisServiceRefundQrisArgs) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("RefundQris_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *QrisServiceRefundQrisArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QrisServiceRefundQrisArgs(%+v)", *p)

}

type QrisServiceRefundQrisResult struct {
	Success *RefundQrisResponse `thrift:"success,0,optional"`
}

func NewQrisServiceRefundQrisResult() *QrisServiceRefundQrisResult {
	return &QrisServiceRefundQrisResult{}
}

func (p *QrisServiceRefundQrisResult) InitDefault() {
}

var QrisServiceRefundQrisResult_Success_DEFAULT *RefundQrisResponse

func (p *QrisServiceRefundQrisResult) GetSuccess() (v *RefundQrisResponse) {
	if !p.IsSetSuccess() {
		return QrisServiceRefundQrisResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_QrisServiceRefundQrisResult = map[int16]string{
	0: "success",
}

func (p *QrisServiceRefundQrisResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *QrisServiceRefundQrisResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_QrisServiceRefundQrisResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *QrisServiceRefundQrisResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewRefundQrisResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *QrisServiceRefundQrisResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("RefundQris_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *QrisServiceRefundQrisResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *QrisServiceRefundQrisResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QrisServiceRefundQrisResult(%+v)", *p)

}

type QrisServiceDecodeQrisArgs struct {
}

func NewQrisServiceDecodeQrisArgs() *QrisServiceDecodeQrisArgs {
	return &QrisServiceDecodeQrisArgs{}
}

func (p *QrisServiceDecodeQrisArgs) InitDefault() {
}

var fieldIDToName_QrisServiceDecodeQrisArgs = map[int16]string{}

func (p *QrisServiceDecodeQrisArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *QrisServiceDecodeQrisArgs) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("DecodeQris_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *QrisServiceDecodeQrisArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QrisServiceDecodeQrisArgs(%+v)", *p)

}

type QrisServiceDecodeQrisResult struct {
	Success *DecodeQrisResponse `thrift:"success,0,optional"`
}

func NewQrisServiceDecodeQrisResult() *QrisServiceDecodeQrisResult {
	return &QrisServiceDecodeQrisResult{}
}

func (p *QrisServiceDecodeQrisResult) InitDefault() {
}

var QrisServiceDecodeQrisResult_Success_DEFAULT *DecodeQrisResponse

func (p *QrisServiceDecodeQrisResult) GetSuccess() (v *DecodeQrisResponse) {
	if !p.IsSetSuccess() {
		return QrisServiceDecodeQrisResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_QrisServiceDecodeQrisResult = map[int16]string{
	0: "success",
}

func (p *QrisServiceDecodeQrisResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *QrisServiceDecodeQrisResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_QrisServiceDecodeQrisResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *QrisServiceDecodeQrisResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewDecodeQrisResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *QrisServiceDecodeQrisResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DecodeQris_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *QrisServiceDecodeQrisResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *QrisServiceDecodeQrisResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QrisServiceDecodeQrisResult(%+v)", *p)

}

type QrisServicePaymentQrisArgs struct {
}

func NewQrisServicePaymentQrisArgs() *QrisServicePaymentQrisArgs {
	return &QrisServicePaymentQrisArgs{}
}

func (p *QrisServicePaymentQrisArgs) InitDefault() {
}

var fieldIDToName_QrisServicePaymentQrisArgs = map[int16]string{}

func (p *QrisServicePaymentQrisArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *QrisServicePaymentQrisArgs) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("PaymentQris_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *QrisServicePaymentQrisArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QrisServicePaymentQrisArgs(%+v)", *p)

}

type QrisServicePaymentQrisResult struct {
	Success *PaymentQrisResponse `thrift:"success,0,optional"`
}

func NewQrisServicePaymentQrisResult() *QrisServicePaymentQrisResult {
	return &QrisServicePaymentQrisResult{}
}

func (p *QrisServicePaymentQrisResult) InitDefault() {
}

var QrisServicePaymentQrisResult_Success_DEFAULT *PaymentQrisResponse

func (p *QrisServicePaymentQrisResult) GetSuccess() (v *PaymentQrisResponse) {
	if !p.IsSetSuccess() {
		return QrisServicePaymentQrisResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_QrisServicePaymentQrisResult = map[int16]string{
	0: "success",
}

func (p *QrisServicePaymentQrisResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *QrisServicePaymentQrisResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_QrisServicePaymentQrisResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *QrisServicePaymentQrisResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewPaymentQrisResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *QrisServicePaymentQrisResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PaymentQris_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *QrisServicePaymentQrisResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *QrisServicePaymentQrisResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QrisServicePaymentQrisResult(%+v)", *p)

}
